{"version":3,"sources":["components/Dolar.js","App.js","serviceWorker.js","index.js"],"names":["Dolar","initRef","React","createRef","endRef","apiKey","state","valores","status","calcularMaximo","Math","max","apply","map","dato","parseInt","Valor","calcularMinimo","min","calcularPromedio","total","forEach","length","getValores","event","preventDefault","i","current","value","split","e","url","fetch","then","res","json","setState","Dolares","Fragment","className","onSubmit","this","onChange","htmlFor","type","name","ref","Component","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qMAuJeA,G,kNAlJXC,QAAUC,IAAMC,Y,EAChBC,OAASF,IAAMC,Y,EAEfE,OAAS,2C,EAETC,MAAQ,CAEJC,QAAU,GACVC,OAAQ,M,EAIZC,eAAiB,WAIb,OAFUC,KAAKC,IAAIC,MAAMF,KAAM,EAAKJ,MAAMC,QAAQM,KAAK,SAACC,GAAW,OAAOC,SAASD,EAAKE,Y,EAM5FC,eAAiB,WAIb,OAFUP,KAAKQ,IAAIN,MAAMF,KAAM,EAAKJ,MAAMC,QAAQM,KAAK,SAACC,GAAW,OAAOC,SAASD,EAAKE,Y,EAM5FG,iBAAmB,WAEf,IAAIC,EAAQ,EAQZ,OANA,EAAKd,MAAMC,QAAQc,SAAS,SAACP,GACzBM,GAASL,SAASD,EAAKE,UAGhBD,SAASK,EAAQ,EAAKd,MAAMC,QAAQe,S,EAKnDC,WAAa,SAACC,GAEVA,EAAMC,iBAEN,IAAIC,EAAI,EAAKzB,QAAQ0B,QAAQC,MAAMC,MAAM,KACrCC,EAAI,EAAK1B,OAAOuB,QAAQC,MAAMC,MAAM,KAEpCE,EAAG,oEAAgEL,EAAE,GAAlE,YAAwEA,EAAE,GAA1E,mBAAuFA,EAAE,GAAzF,YAA+FI,EAAE,GAAjG,YAAuGA,EAAE,GAAzG,mBAAsHA,EAAE,GAAxH,mBAAqI,EAAKzB,OAA1I,iBAEP2B,MAAMD,GACLE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAM,SAAAE,GAEH,EAAKC,SAAS,CACV7B,QAAS4B,EAAKE,QACd7B,OAAQ,gB,uDAyBhB,OAEI,kBAAC,IAAM8B,SAAP,KAEI,yBAAKC,UAAU,aAEX,yBAAKA,UAAU,OAEX,yBAAKA,UAAU,YAEX,wBAAIA,UAAU,yBAAd,iCAEA,0BAAMA,UAAU,uBAAuBC,SAAUC,KAAKlB,WAAYmB,SAAUD,KAAKlB,YAE7E,6BAEI,yBAAKgB,UAAU,cACX,2BAAOI,QAAQ,UAAf,UACA,2BAAOC,KAAK,OAAOC,KAAK,SAASC,IAAKL,KAAKxC,WAG/C,yBAAKsC,UAAU,cACX,2BAAOI,QAAQ,WAAf,UACA,2BAAOC,KAAK,OAAOC,KAAK,UAAUC,IAAKL,KAAKrC,WAKpD,2BAAOmC,UAAU,MAAMK,KAAK,SAAShB,MAAM,gBAMnD,yBAAKW,UAAU,YAEY,YAAtBE,KAAKnC,MAAME,QACR,6BAIA,yBAAK+B,UAAU,8BACX,gDAAqB,gCAASE,KAAKtB,mBAAd,SACrB,iDAAmB,gCAASsB,KAAKhC,iBAAd,SACnB,iDAAmB,gCAASgC,KAAKxB,iBAAd,mB,GA/HnC8B,cCSLC,MARf,WACE,OACE,yBAAKC,MAAM,OACT,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dfe841d3.chunk.js","sourcesContent":["import React, {Component} from 'react'; \nimport ApexCharts from 'apexcharts'\n\nclass Dolar extends Component{ \n\n    initRef = React.createRef();\n    endRef = React.createRef();\n\n    apiKey = '9c84db4d447c80c74961a72245371245cb7ac15f';\n\n    state = {\n\n        valores : [],\n        status: null\n\n    } \n\n    calcularMaximo = () => { \n\n        var max = Math.max.apply(Math, this.state.valores.map( (dato) => { return parseInt(dato.Valor); }));\n\n        return max;\n\n    }\n\n    calcularMinimo = () => { \n\n        var min = Math.min.apply(Math, this.state.valores.map( (dato) => { return parseInt(dato.Valor); }));\n\n        return min;\n\n    } \n\n    calcularPromedio = () => {\n        \n        var total = 0;\n\n        this.state.valores.forEach( (dato) => {\n            total += parseInt(dato.Valor);\n        });\n\n        var prom = parseInt(total / this.state.valores.length);\n\n        return prom;\n    } \n\n    getValores = (event) => {\n\n        event.preventDefault(); \n\n        var i = this.initRef.current.value.split('-');\n        var e = this.endRef.current.value.split('-');\n        \n        var url = `https://api.sbif.cl/api-sbifv3/recursos_api/dolar/periodo/${i[0]}/${i[1]}/dias_i/${i[2]}/${e[0]}/${e[1]}/dias_f/${e[2]}?apikey=${this.apiKey}&formato=json`;\n \n        fetch(url)\n        .then(res => res.json())\n        .then( json => {\n\n            this.setState({\n                valores: json.Dolares,\n                status: 'success'\n            });\n\n        });\n\n\n    } \n \n    render(){  \n\n        // var options = {\n        //     chart: {\n        //       type: 'line'\n        //     },\n        //     series: [{\n        //       name: 'Valor',\n        //       data: [30,40,35,50,49,60,70,91,125]\n        //     }],\n        //     xaxis: {\n        //       categories: ['Fecha']\n        //     }\n        //   }\n          \n        //   var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\n           \n        return(\n\n            <React.Fragment> \n\n                <div className=\"container\">\n \n                    <div className=\"row\">\n \n                        <div className=\"col-sm-6\">\n\n                            <h1 className=\"title animate__fadeIn\">Calcula el valor del dólar</h1>\n\n                            <form className=\"form animate__fadeIn\" onSubmit={this.getValores} onChange={this.getValores}>\n\n                                <div>\n\n                                    <div className=\"form-group\"> \n                                        <label htmlFor=\"inicio\">Desde:</label> \n                                        <input type=\"date\" name=\"inicio\" ref={this.initRef}/>\n                                    </div>\n\n                                    <div className=\"form-group\">  \n                                        <label htmlFor=\"termino\">Hasta:</label>\n                                        <input type=\"date\" name=\"termino\" ref={this.endRef} />\n                                    </div>\n\n                                </div>\n\n                                <input className=\"btn\" type=\"submit\" value=\"Promediar\" />\n\n                            </form> \n\n                        </div>\n\n                        <div className=\"col-sm-6\">\n                             \n                            {this.state.status === 'success' &&\n                                <div>\n\n                                {/* {chart.render()} */}\n                                \n                                <div className=\"resultados animate__fadeIn\"> \n                                    <h2>Valor promedio : <strong>{this.calcularPromedio()} USD</strong></h2>\n                                    <h2>Valor mínimo : <strong>{this.calcularMaximo()} USD</strong></h2>\n                                    <h2>Valor máximo : <strong>{this.calcularMinimo()} USD</strong></h2>\n                                </div>\n\n                                </div>\n            \n                            }\n \n                        </div>\n                    \n                    </div>\n\n                </div>\n\n            </React.Fragment>\n\n        );\n        \n    }\n\n}\n\nexport default Dolar;\n","import React from 'react';  \nimport './assets/css/App.css';\nimport Dolar from './components/Dolar'; \n\nfunction App() {\n  return (\n    <div class=\"App\">\n      <Dolar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';  \nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}